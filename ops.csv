Opcode,Instruction,Format,Description,,Registers
0x00,NOP,-  :  -,No operation,,8/16-bit
0x01,,,SEABRT - state example analyze base relate test,,A - accumulator
0x02,,,There exists a way to combine 2 segment regsâ€¦,,X - general purpose
0x03,,,To achieve 2/4GB worth of addressable memory!,,Y - general purpose
0x04,,,FSM - Free/Fluid Sec/Seg Mode (new),,
0x05,,,CSM - Classic/Crystal Sec/Seg Mode (default),,16-bit
0x06,,,,,DI - dest. index
0x07,,,,,SI - source index
0x08,,,,,BP - base pointer
0x09,,,,,IP - inst. pointer
0x0A,,,,,SP - stack pointer
0x0B,,,,,CF - CPU flags
0x0C,,,,,
0x0D,,,,,8-bit
0x0E,,,,,CSEG - code seg.
0x0F,,,,,DSEG - data seg.
0x10,AND,"(A8), X8  :  A8",Logical AND A8 and X8 to A8,,SSEG - stack seg.
0x11,AND,"(A8), Y8  :  A8",Logical AND A8 and Y8 to A8,,
0x12,AND,"(A8), imm8  :  A8",Logical AND A8 and imm8 to A8,,(hybrid 8-bit is low)
0x13,AND,"(A16), X16  :  A16",Logical AND A16 and X16 to A16,,
0x14,AND,"(A16), Y16  :  A16",Logical AND A16 and Y16 to A16,,
0x15,AND,"(A16), imm16  :  A16",Logical AND A16 and imm16 to A16,,
0x16,-,,,,
0x17,-,,,,
0x18,OR,"A8, X8  :  A8",Logical OR A8 and X8 to A8,,
0x19,OR,"A8, Y8  :  A8",Logical OR A8 and Y8 to A8,,
0x1A,OR,"A8, imm8  :  A8",Logical OR A8 and imm8 to A8,,
0x1B,OR,"A16, X16  :  A16",Logical OR A16 and X16 to A16,,
0x1C,OR,"A16, Y16  :  A16",Logical OR A16 and Y16 to A16,,
0x1D,OR,"A16, imm16  :  A16",Logical OR A16 and imm16 to A16,,
0x1E,-,,,,
0x1F,-,,,,
0x20,NOT,A8  :  A8,Logical NOT A8 to A8,,
0x21,NOT,A16  :  A16,Logical NOT A16 to A16,,
0x22,BSL,"A8, X8  :  A8",Shift A8 left by X bits,,
0x23,BSL,"A8, Y8  :  A8",Shift A8 left by Y bits,,
0x24,BSL,"A8, imm8  :  A8",Shift A8 left by i bits,,
0x25,BSL,"A16, X16  :  A16",Shift A16 left by X bits,,
0x26,BSL,"A16, Y16  :  A16",Shift A16 left by Y bits,,
0x27,BSL,"A16, imm16  :  A16",Shift A16 left by i bits,,
0x28,BSR,"A8, X8  :  A8",Shift A8 right by X bits,,
0x29,BSR,"A8, Y8  :  A8",Shift A8 right by Y bits,,
0x2A,BSR,"A8, imm8  :  A8",Shift A8 right by i bits,,
0x2B,BSR,"A16, X16  :  A16",Shift A16 right by X bits,,
0x2C,BSR,"A16, Y16  :  A16",Shift A16 right by Y bits,,
0x2D,BSR,"A16, imm16  :  A16",Shift A16 right by i bits,,
0x2E,-,,,,
0x2F,-,,,,
0x30,XOR,"A8, X8  :  A8",,,
0x31,XOR,"A8, Y8  :  A8",,,
0x32,XOR,"A8, imm8  :  A8",,,
0x33,XOR,"A16, X16  :  A16",,,
0x34,XOR,"A16, Y16  :  A16",,,
0x35,XOR,"A16, imm16  :  A16",,,
0x36,-,,,,
0x37,-,,,,
0x38,,,,,
0x39,,,,,
0x3A,,,,,
0x3B,,,,,
0x3C,,,,,
0x3D,,,,,
0x3E,,,,,
0x3F,,,,,
0x40,ADD,"A8, X8  :  A8",Add X8 into A8,,
0x41,ADD,"A8, Y8  :  A8",Add Y8 into A8,,
0x42,ADD,"A8, imm8  :  A8",Add imm8 into A8,,
0x43,ADD,"A16, X16  :  A16",Add X16 into A16,,
0x44,ADD,"A16, Y16  :  A16",Add Y16 into A16,,
0x45,ADD,"A16, imm16  :  A16",Add imm16 into A16,,
0x46,-,,,,
0x47,-,,,,
0x48,SUB,"A8, X8  :  A8",,,
0x49,SUB,"A8, Y8  :  A8",,,
0x4A,SUB,"A8, imm8  :  A8",,,
0x4B,SUB,"A16, X16  :  A16",,,
0x4C,SUB,"A16, Y16  :  A16",,,
0x4D,SUB,"A16, imm16  :  A8",,,
0x4E,-,,,,
0x4F,-,,,,
0x50,CMP,"A8, X8  :  CF(4)",,,
0x51,,,,,
0x52,,,,,
0x53,,,,,
0x54,,,,,
0x55,,,,,
0x56,,,,,
0x57,,,,,
0x58,,,,,
0x59,,,,,
0x5A,,,,,
0x5B,,,,,
0x5C,,,,,
0x5D,,,,,
0x5E,,,,,
0x5F,,,,,